name: dist-pub

on:
  push:

jobs:
  build:
    runs-on: ubuntu-18.04

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'
          fetch-depth: 0

      - name: Prepare build environment
        run: |
          sudo apt-get update
          sudo apt-get -y install binutils-dev liblzma-dev zlib1g-dev

      - name: Build iPxe
        run: |
          ./flasher.sh --compile

      - name: Make Package
        run: |
          rm -rf /tmp/dist
          mkdir -p /tmp/dist
          touch ipxe/.dist
          tar --create --gzip --numeric-owner --owner root --group root \
            --transform "s@^@desktop-flasher/@" \
            -f /tmp/dist/desktop-flasher.tar.gz \
            flasher.sh \
            ipxe/.dist \
            ipxe/src/bin-i386-pcbios/ipxe.hd \
            ipxe/src/bin-i386-pcbios/mbr.bin \
            ipxe/src/bin-x86_64-efi/ipxe.efi

      - name: Upload Asset
        uses: actions/upload-artifact@v2
        with:
          name: Desktop Flasher
          path: /tmp/dist/desktop-flasher.tar.gz
  
  test:
    runs-on: ubuntu-18.04
    needs:
      build
    steps:
      - name: Download built ipxe package
        uses: actions/download-artifact@v2
        with:
          name: Desktop Flasher

      - name: Install needed tools
        run: |
          sudo apt-get update
          # tools needed by flasher
          sudo apt-get -y --no-install-recommends install fdisk gdisk uuid-runtime mtools
          # tools needed to test result
          sudo apt-get -y --no-install-recommends install dosfstools qemu-system-x86 ovmf expect

      - name: Setup test env
        run: |
          tar -xvz --strip-components 1 -f desktop-flasher.tar.gz
          truncate -s 10G disk
          lodev="$(sudo losetup -f)"
          echo "lodev=${lodev}" >> "$GITHUB_ENV"
          sudo losetup "$lodev" disk

      - name: Write Data
        run: |
          sudo -E bash --noprofile --norc -eo pipefail << 'EOF'
            . flasher.sh __TEST__
            read_serial () {
              echo "ABCD1234"
            }
            set +e
            work_on_disk "$lodev"
            ret=$?
            if [ "$ret" -ne 0 ]; then
              echo "Write disk error $ERROR"
            fi
            exit $ret
          EOF

      - name: Load Partition table
        run: |
          sudo partx --update "${lodev}"

      - name: Test partition table
        run: |
          if !([ -b "${lodev}p1" ] && [ -b "${lodev}p2" ] && [ -b "${lodev}p3" ]); then
            set +e
            sudo lsblk "${lodev}"
            sudo sgdisk -p "${lodev}"
            echo "Missing parts"
            exit 1
          fi
          label="$(sudo blkid --output value  --match-tag "PARTLABEL" "${lodev}p1")"
          if [ "$label" != "thupxeroot" ]; then
            set +e
            sudo blkid "${lodev}p1"
            echo "Part label is not correct"
            exit 1
          fi
          partuuid="$(sudo blkid --output value  --match-tag "PARTUUID" "${lodev}p1")"
          if [ "$partuuid" != "358c2fe6-6a46-534c-8c87-a9988123a761" ]; then
          set +e
            sudo blkid "${lodev}p1"
            echo "Part UUID is not correct"
            exit 1
          fi

      - name: Test EFI filesystem
        run: |
          sudo fsck.msdos "${lodev}p3"

      - name: Pack up Failed image when failure
        id: pack_scene
        if: ${{ failure() }}
        run: |
          tar --create --gzip --numeric-owner --owner root --group root \
            --sparse -f disk.tar.gz disk
          echo "::set-output name=run::true"

      - name: Upload failed image
        if: always() && steps.pack_scene.outputs.run == 'true'
        uses: actions/upload-artifact@v2
        with:
          name: Failed Disk Image
          path: disk.tar.gz
