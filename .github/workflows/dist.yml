name: dist-pub

on:
  push:

jobs:
  build:
    runs-on: ubuntu-18.04

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'
          fetch-depth: 0

      - name: Prepare build environment
        run: |
          sudo apt-get update
          sudo apt-get -y install binutils-dev liblzma-dev zlib1g-dev

      - name: Build iPxe
        run: |
          ./flasher.sh --compile

      - name: Make Package
        run: |
          rm -rf /tmp/dist
          mkdir -p /tmp/dist
          touch ipxe/.dist
          tar --create --gzip --numeric-owner --owner root --group root \
            --transform "s@^@desktop-flasher/@" \
            -f /tmp/dist/desktop-flasher.tar.gz \
            flasher.sh \
            ipxe/.dist \
            ipxe/src/bin-i386-pcbios/ipxe.hd \
            ipxe/src/bin-i386-pcbios/mbr.bin \
            ipxe/src/bin-x86_64-efi/ipxe.efi

      - name: Upload Asset
        uses: actions/upload-artifact@v2
        with:
          name: Desktop Flasher
          path: /tmp/dist/desktop-flasher.tar.gz
  
  test:
    runs-on: ubuntu-18.04
    env:
      BUILD_MIRROR: "http://archive.ubuntu.com/ubuntu"
    needs:
      build
    steps:
      - name: Download built ipxe package
        uses: actions/download-artifact@v2
        with:
          name: Desktop Flasher

      - name: Find out current mirror in the build environment
        run: |
          set +e
          if [ "$(lsb_release -i -s )" != "Ubuntu" ]; then
            exit 0;
          fi
          cat /etc/apt/sources.list | grep "^deb" |
            grep "$(lsb_release -c -s)"  | awk '{print $2}' | sed 's@/$@@' |
            while read url; do
              if curl --head -sfL "${url}/dists/${SUIT}/InRelease" > /dev/null; then
                echo "Found current mirror: ${url}" >&2
                echo "BUILD_MIRROR=${url}"  >> "$GITHUB_ENV"
                break;
              fi
            done
          exit 0;

      - name: Install needed tools
        run: |
          sudo apt-get update
          # tools needed by flasher
          sudo apt-get -y --no-install-recommends install fdisk gdisk uuid-runtime mtools
          # tools needed to test result
          sudo apt-get -y --no-install-recommends install dosfstools qemu-system-x86 ovmf expect
          # use new verison of seabios
          echo "deb ${BUILD_MIRROR} focal main restricted" | sudo tee /etc/apt/sources.list.d/focal.list
          sudo apt-get update
          sudo apt-get -t focal -y --no-install-recommends install seabios

      - name: Setup test env
        run: |
          tar -xvz --strip-components 1 -f desktop-flasher.tar.gz
          truncate -s 10G disk
          lodev="$(sudo losetup -f)"
          echo "lodev=${lodev}" >> "$GITHUB_ENV"
          sudo losetup "$lodev" disk

      - name: Write Data
        run: |
          sudo -E bash --noprofile --norc -eo pipefail << 'EOF'
            . flasher.sh __TEST__
            read_serial () {
              echo "ABCD1234"
            }
            set +e
            work_on_disk "$lodev"
            ret=$?
            if [ "$ret" -ne 0 ]; then
              echo "Write disk error $ERROR"
            fi
            exit $ret
          EOF

      - name: Load Partition table
        run: |
          sudo partx --update "${lodev}"

      - name: Test partition table
        run: |
          if !([ -b "${lodev}p1" ] && [ -b "${lodev}p2" ] && [ -b "${lodev}p3" ]); then
            set +e
            sudo lsblk "${lodev}"
            sudo sgdisk -p "${lodev}"
            echo "Missing parts"
            exit 1
          fi
          label="$(sudo blkid --output value  --match-tag "PARTLABEL" "${lodev}p1")"
          if [ "$label" != "thupxeroot" ]; then
            set +e
            sudo blkid "${lodev}p1"
            echo "Part label is not correct"
            exit 1
          fi
          partuuid="$(sudo blkid --output value  --match-tag "PARTUUID" "${lodev}p1")"
          if [ "$partuuid" != "358c2fe6-6a46-534c-8c87-a9988123a761" ]; then
          set +e
            sudo blkid "${lodev}p1"
            echo "Part UUID is not correct"
            exit 1
          fi

      - name: Test EFI filesystem
        run: |
          sudo fsck.msdos "${lodev}p3"

      - name: Disarm loop device
        run: |
          sudo losetup -d "${lodev}"

      - name: Test BIOS boot
        run: |
          mkdir -p tftp
          cat > tftp/boot_test.ipxe << EOF
          #!ipxe
          echo IPXE_TEST_DEAD_BEEF
          sleep 1
          poweroff
          EOF
          expect << 'EOF'
            set timeout 120
            spawn sudo qemu-system-x86_64 -cpu kvm64 -machine pc \
              -smp cpus=1,cores=1,sockets=1 -m 1G \
              -chardev stdio,mux=on,id=char0 -nographic \
              -monitor none \
              -netdev user,id=net0,tftp=tftp/,bootfile=boot_test.ipxe \
              -device virtio-net-pci,netdev=net0,id=net0,rombar=0 \
              -serial chardev:char0 \
              -device pvscsi,id=scsi -blockdev driver=raw,node-name=disk1,file.driver=file,file.filename=disk \
              -device scsi-hd,id=hdd1,bus=scsi.0,serial=ABCD1234,drive=disk1,bootindex=1
            expect {
              "*IPXE_TEST_DEAD_BEEF" {}
              eof             {puts "Meet eof"; exit 2}
              timeout              {puts "Timeout"; exit 2}
              "*No bootable device" {puts "Boot error"; exit 1}
            }
            expect {
              eof {}
              timeout {puts "Timeout"; exit 2}
            }
            exit 0
          EOF

      - name: Test UEFI boot
        run: |
          mkdir -p tftp
          cat > tftp/boot_test.ipxe << EOF
          #!ipxe
          echo IPXE_TEST_DEAD_BEEF
          sleep 1
          poweroff
          EOF
          expect << 'EOF'
            set timeout 120
            spawn sudo qemu-system-x86_64 -cpu kvm64 -machine pc \
              -smp cpus=1,cores=1,sockets=1 -m 1G \
              -chardev stdio,mux=on,id=char0 -nographic \
              -monitor none \
              -netdev user,id=net0,tftp=tftp/,bootfile=boot_test.ipxe \
              -device virtio-net-pci,netdev=net0,id=net0,rombar=0 \
              -serial chardev:char0 \
              -blockdev driver=raw,node-name=disk1,file.driver=file,file.filename=disk \
              -device virtio-blk-pci,id=hdd1,serial=ABCD1234,drive=disk1,bootindex=1 \
              -bios OVMF.fd
            expect {
              "*IPXE_TEST_DEAD_BEEF" {}
              eof             {puts "Meet eof"; exit 2}
              timeout              {puts "Timeout"; exit 2}
              "*Shell>" {puts "Boot error"; exit 1}
            }
            expect {
              eof {}
              timeout {puts "Timeout"; exit 2}
            }
            exit 0
          EOF

      - name: Pack up Failed image when failure
        id: pack_scene
        if: ${{ failure() }}
        run: |
          tar --create --gzip --numeric-owner --owner root --group root \
            --sparse -f disk.tar.gz disk
          echo "::set-output name=run::true"

      - name: Upload failed image
        if: always() && steps.pack_scene.outputs.run == 'true'
        uses: actions/upload-artifact@v2
        with:
          name: Failed Disk Image
          path: disk.tar.gz
